{"ast":null,"code":"/*!\n * Unipointer v2.3.0\n * base class for doing one thing with pointer event\n * MIT license\n */\n\n/*jshint browser: true, undef: true, unused: true, strict: true */\n(function (window, factory) {\n  // universal module definition\n\n  /* jshint strict: false */\n\n  /*global define, module, require */\n  if (typeof define == 'function' && define.amd) {\n    // AMD\n    define(['ev-emitter/ev-emitter'], function (EvEmitter) {\n      return factory(window, EvEmitter);\n    });\n  } else if (typeof module == 'object' && module.exports) {\n    // CommonJS\n    module.exports = factory(window, require('ev-emitter'));\n  } else {\n    // browser global\n    window.Unipointer = factory(window, window.EvEmitter);\n  }\n})(window, function factory(window, EvEmitter) {\n  'use strict';\n\n  function noop() {}\n\n  function Unipointer() {} // inherit EvEmitter\n\n\n  var proto = Unipointer.prototype = Object.create(EvEmitter.prototype);\n\n  proto.bindStartEvent = function (elem) {\n    this._bindStartEvent(elem, true);\n  };\n\n  proto.unbindStartEvent = function (elem) {\n    this._bindStartEvent(elem, false);\n  };\n  /**\n   * Add or remove start event\n   * @param {Boolean} isAdd - remove if falsey\n   */\n\n\n  proto._bindStartEvent = function (elem, isAdd) {\n    // munge isAdd, default to true\n    isAdd = isAdd === undefined ? true : isAdd;\n    var bindMethod = isAdd ? 'addEventListener' : 'removeEventListener'; // default to mouse events\n\n    var startEvent = 'mousedown';\n\n    if (window.PointerEvent) {\n      // Pointer Events\n      startEvent = 'pointerdown';\n    } else if ('ontouchstart' in window) {\n      // Touch Events. iOS Safari\n      startEvent = 'touchstart';\n    }\n\n    elem[bindMethod](startEvent, this);\n  }; // trigger handler methods for events\n\n\n  proto.handleEvent = function (event) {\n    var method = 'on' + event.type;\n\n    if (this[method]) {\n      this[method](event);\n    }\n  }; // returns the touch that we're keeping track of\n\n\n  proto.getTouch = function (touches) {\n    for (var i = 0; i < touches.length; i++) {\n      var touch = touches[i];\n\n      if (touch.identifier == this.pointerIdentifier) {\n        return touch;\n      }\n    }\n  }; // ----- start event ----- //\n\n\n  proto.onmousedown = function (event) {\n    // dismiss clicks from right or middle buttons\n    var button = event.button;\n\n    if (button && button !== 0 && button !== 1) {\n      return;\n    }\n\n    this._pointerDown(event, event);\n  };\n\n  proto.ontouchstart = function (event) {\n    this._pointerDown(event, event.changedTouches[0]);\n  };\n\n  proto.onpointerdown = function (event) {\n    this._pointerDown(event, event);\n  };\n  /**\n   * pointer start\n   * @param {Event} event\n   * @param {Event or Touch} pointer\n   */\n\n\n  proto._pointerDown = function (event, pointer) {\n    // dismiss right click and other pointers\n    // button = 0 is okay, 1-4 not\n    if (event.button || this.isPointerDown) {\n      return;\n    }\n\n    this.isPointerDown = true; // save pointer identifier to match up touch events\n\n    this.pointerIdentifier = pointer.pointerId !== undefined ? // pointerId for pointer events, touch.indentifier for touch events\n    pointer.pointerId : pointer.identifier;\n    this.pointerDown(event, pointer);\n  };\n\n  proto.pointerDown = function (event, pointer) {\n    this._bindPostStartEvents(event);\n\n    this.emitEvent('pointerDown', [event, pointer]);\n  }; // hash of events to be bound after start event\n\n\n  var postStartEvents = {\n    mousedown: ['mousemove', 'mouseup'],\n    touchstart: ['touchmove', 'touchend', 'touchcancel'],\n    pointerdown: ['pointermove', 'pointerup', 'pointercancel']\n  };\n\n  proto._bindPostStartEvents = function (event) {\n    if (!event) {\n      return;\n    } // get proper events to match start event\n\n\n    var events = postStartEvents[event.type]; // bind events to node\n\n    events.forEach(function (eventName) {\n      window.addEventListener(eventName, this);\n    }, this); // save these arguments\n\n    this._boundPointerEvents = events;\n  };\n\n  proto._unbindPostStartEvents = function () {\n    // check for _boundEvents, in case dragEnd triggered twice (old IE8 bug)\n    if (!this._boundPointerEvents) {\n      return;\n    }\n\n    this._boundPointerEvents.forEach(function (eventName) {\n      window.removeEventListener(eventName, this);\n    }, this);\n\n    delete this._boundPointerEvents;\n  }; // ----- move event ----- //\n\n\n  proto.onmousemove = function (event) {\n    this._pointerMove(event, event);\n  };\n\n  proto.onpointermove = function (event) {\n    if (event.pointerId == this.pointerIdentifier) {\n      this._pointerMove(event, event);\n    }\n  };\n\n  proto.ontouchmove = function (event) {\n    var touch = this.getTouch(event.changedTouches);\n\n    if (touch) {\n      this._pointerMove(event, touch);\n    }\n  };\n  /**\n   * pointer move\n   * @param {Event} event\n   * @param {Event or Touch} pointer\n   * @private\n   */\n\n\n  proto._pointerMove = function (event, pointer) {\n    this.pointerMove(event, pointer);\n  }; // public\n\n\n  proto.pointerMove = function (event, pointer) {\n    this.emitEvent('pointerMove', [event, pointer]);\n  }; // ----- end event ----- //\n\n\n  proto.onmouseup = function (event) {\n    this._pointerUp(event, event);\n  };\n\n  proto.onpointerup = function (event) {\n    if (event.pointerId == this.pointerIdentifier) {\n      this._pointerUp(event, event);\n    }\n  };\n\n  proto.ontouchend = function (event) {\n    var touch = this.getTouch(event.changedTouches);\n\n    if (touch) {\n      this._pointerUp(event, touch);\n    }\n  };\n  /**\n   * pointer up\n   * @param {Event} event\n   * @param {Event or Touch} pointer\n   * @private\n   */\n\n\n  proto._pointerUp = function (event, pointer) {\n    this._pointerDone();\n\n    this.pointerUp(event, pointer);\n  }; // public\n\n\n  proto.pointerUp = function (event, pointer) {\n    this.emitEvent('pointerUp', [event, pointer]);\n  }; // ----- pointer done ----- //\n  // triggered on pointer up & pointer cancel\n\n\n  proto._pointerDone = function () {\n    this._pointerReset();\n\n    this._unbindPostStartEvents();\n\n    this.pointerDone();\n  };\n\n  proto._pointerReset = function () {\n    // reset properties\n    this.isPointerDown = false;\n    delete this.pointerIdentifier;\n  };\n\n  proto.pointerDone = noop; // ----- pointer cancel ----- //\n\n  proto.onpointercancel = function (event) {\n    if (event.pointerId == this.pointerIdentifier) {\n      this._pointerCancel(event, event);\n    }\n  };\n\n  proto.ontouchcancel = function (event) {\n    var touch = this.getTouch(event.changedTouches);\n\n    if (touch) {\n      this._pointerCancel(event, touch);\n    }\n  };\n  /**\n   * pointer cancel\n   * @param {Event} event\n   * @param {Event or Touch} pointer\n   * @private\n   */\n\n\n  proto._pointerCancel = function (event, pointer) {\n    this._pointerDone();\n\n    this.pointerCancel(event, pointer);\n  }; // public\n\n\n  proto.pointerCancel = function (event, pointer) {\n    this.emitEvent('pointerCancel', [event, pointer]);\n  }; // -----  ----- //\n  // utility function for getting x/y coords from event\n\n\n  Unipointer.getPointerPoint = function (pointer) {\n    return {\n      x: pointer.pageX,\n      y: pointer.pageY\n    };\n  }; // -----  ----- //\n\n\n  return Unipointer;\n});","map":null,"metadata":{},"sourceType":"script"}