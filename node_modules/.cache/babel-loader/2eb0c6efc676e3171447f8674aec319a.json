{"ast":null,"code":"// player & autoPlay\n(function (window, factory) {\n  // universal module definition\n\n  /* jshint strict: false */\n  if (typeof define == 'function' && define.amd) {\n    // AMD\n    define(['ev-emitter/ev-emitter', 'fizzy-ui-utils/utils', './flickity'], function (EvEmitter, utils, Flickity) {\n      return factory(EvEmitter, utils, Flickity);\n    });\n  } else if (typeof module == 'object' && module.exports) {\n    // CommonJS\n    module.exports = factory(require('ev-emitter'), require('fizzy-ui-utils'), require('./flickity'));\n  } else {\n    // browser global\n    factory(window.EvEmitter, window.fizzyUIUtils, window.Flickity);\n  }\n})(window, function factory(EvEmitter, utils, Flickity) {\n  'use strict'; // -------------------------- Player -------------------------- //\n\n  function Player(parent) {\n    this.parent = parent;\n    this.state = 'stopped'; // visibility change event handler\n\n    this.onVisibilityChange = this.visibilityChange.bind(this);\n    this.onVisibilityPlay = this.visibilityPlay.bind(this);\n  }\n\n  Player.prototype = Object.create(EvEmitter.prototype); // start play\n\n  Player.prototype.play = function () {\n    if (this.state == 'playing') {\n      return;\n    } // do not play if page is hidden, start playing when page is visible\n\n\n    var isPageHidden = document.hidden;\n\n    if (isPageHidden) {\n      document.addEventListener('visibilitychange', this.onVisibilityPlay);\n      return;\n    }\n\n    this.state = 'playing'; // listen to visibility change\n\n    document.addEventListener('visibilitychange', this.onVisibilityChange); // start ticking\n\n    this.tick();\n  };\n\n  Player.prototype.tick = function () {\n    // do not tick if not playing\n    if (this.state != 'playing') {\n      return;\n    }\n\n    var time = this.parent.options.autoPlay; // default to 3 seconds\n\n    time = typeof time == 'number' ? time : 3000;\n\n    var _this = this; // HACK: reset ticks if stopped and started within interval\n\n\n    this.clear();\n    this.timeout = setTimeout(function () {\n      _this.parent.next(true);\n\n      _this.tick();\n    }, time);\n  };\n\n  Player.prototype.stop = function () {\n    this.state = 'stopped';\n    this.clear(); // remove visibility change event\n\n    document.removeEventListener('visibilitychange', this.onVisibilityChange);\n  };\n\n  Player.prototype.clear = function () {\n    clearTimeout(this.timeout);\n  };\n\n  Player.prototype.pause = function () {\n    if (this.state == 'playing') {\n      this.state = 'paused';\n      this.clear();\n    }\n  };\n\n  Player.prototype.unpause = function () {\n    // re-start play if paused\n    if (this.state == 'paused') {\n      this.play();\n    }\n  }; // pause if page visibility is hidden, unpause if visible\n\n\n  Player.prototype.visibilityChange = function () {\n    var isPageHidden = document.hidden;\n    this[isPageHidden ? 'pause' : 'unpause']();\n  };\n\n  Player.prototype.visibilityPlay = function () {\n    this.play();\n    document.removeEventListener('visibilitychange', this.onVisibilityPlay);\n  }; // -------------------------- Flickity -------------------------- //\n\n\n  utils.extend(Flickity.defaults, {\n    pauseAutoPlayOnHover: true\n  });\n  Flickity.createMethods.push('_createPlayer');\n  var proto = Flickity.prototype;\n\n  proto._createPlayer = function () {\n    this.player = new Player(this);\n    this.on('activate', this.activatePlayer);\n    this.on('uiChange', this.stopPlayer);\n    this.on('pointerDown', this.stopPlayer);\n    this.on('deactivate', this.deactivatePlayer);\n  };\n\n  proto.activatePlayer = function () {\n    if (!this.options.autoPlay) {\n      return;\n    }\n\n    this.player.play();\n    this.element.addEventListener('mouseenter', this);\n  }; // Player API, don't hate the ... thanks I know where the door is\n\n\n  proto.playPlayer = function () {\n    this.player.play();\n  };\n\n  proto.stopPlayer = function () {\n    this.player.stop();\n  };\n\n  proto.pausePlayer = function () {\n    this.player.pause();\n  };\n\n  proto.unpausePlayer = function () {\n    this.player.unpause();\n  };\n\n  proto.deactivatePlayer = function () {\n    this.player.stop();\n    this.element.removeEventListener('mouseenter', this);\n  }; // ----- mouseenter/leave ----- //\n  // pause auto-play on hover\n\n\n  proto.onmouseenter = function () {\n    if (!this.options.pauseAutoPlayOnHover) {\n      return;\n    }\n\n    this.player.pause();\n    this.element.addEventListener('mouseleave', this);\n  }; // resume auto-play on hover off\n\n\n  proto.onmouseleave = function () {\n    this.player.unpause();\n    this.element.removeEventListener('mouseleave', this);\n  }; // -----  ----- //\n\n\n  Flickity.Player = Player;\n  return Flickity;\n});","map":null,"metadata":{},"sourceType":"script"}