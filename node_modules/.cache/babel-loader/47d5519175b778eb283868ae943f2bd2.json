{"ast":null,"code":"// animate\n(function (window, factory) {\n  // universal module definition\n\n  /* jshint strict: false */\n  if (typeof define == 'function' && define.amd) {\n    // AMD\n    define(['fizzy-ui-utils/utils'], function (utils) {\n      return factory(window, utils);\n    });\n  } else if (typeof module == 'object' && module.exports) {\n    // CommonJS\n    module.exports = factory(window, require('fizzy-ui-utils'));\n  } else {\n    // browser global\n    window.Flickity = window.Flickity || {};\n    window.Flickity.animatePrototype = factory(window, window.fizzyUIUtils);\n  }\n})(window, function factory(window, utils) {\n  'use strict'; // -------------------------- animate -------------------------- //\n\n  var proto = {};\n\n  proto.startAnimation = function () {\n    if (this.isAnimating) {\n      return;\n    }\n\n    this.isAnimating = true;\n    this.restingFrames = 0;\n    this.animate();\n  };\n\n  proto.animate = function () {\n    this.applyDragForce();\n    this.applySelectedAttraction();\n    var previousX = this.x;\n    this.integratePhysics();\n    this.positionSlider();\n    this.settle(previousX); // animate next frame\n\n    if (this.isAnimating) {\n      var _this = this;\n\n      requestAnimationFrame(function animateFrame() {\n        _this.animate();\n      });\n    }\n  };\n\n  proto.positionSlider = function () {\n    var x = this.x; // wrap position around\n\n    if (this.options.wrapAround && this.cells.length > 1) {\n      x = utils.modulo(x, this.slideableWidth);\n      x = x - this.slideableWidth;\n      this.shiftWrapCells(x);\n    }\n\n    this.setTranslateX(x, this.isAnimating);\n    this.dispatchScrollEvent();\n  };\n\n  proto.setTranslateX = function (x, is3d) {\n    x += this.cursorPosition; // reverse if right-to-left and using transform\n\n    x = this.options.rightToLeft ? -x : x;\n    var translateX = this.getPositionValue(x); // use 3D tranforms for hardware acceleration on iOS\n    // but use 2D when settled, for better font-rendering\n\n    this.slider.style.transform = is3d ? 'translate3d(' + translateX + ',0,0)' : 'translateX(' + translateX + ')';\n  };\n\n  proto.dispatchScrollEvent = function () {\n    var firstSlide = this.slides[0];\n\n    if (!firstSlide) {\n      return;\n    }\n\n    var positionX = -this.x - firstSlide.target;\n    var progress = positionX / this.slidesWidth;\n    this.dispatchEvent('scroll', null, [progress, positionX]);\n  };\n\n  proto.positionSliderAtSelected = function () {\n    if (!this.cells.length) {\n      return;\n    }\n\n    this.x = -this.selectedSlide.target;\n    this.velocity = 0; // stop wobble\n\n    this.positionSlider();\n  };\n\n  proto.getPositionValue = function (position) {\n    if (this.options.percentPosition) {\n      // percent position, round to 2 digits, like 12.34%\n      return Math.round(position / this.size.innerWidth * 10000) * 0.01 + '%';\n    } else {\n      // pixel positioning\n      return Math.round(position) + 'px';\n    }\n  };\n\n  proto.settle = function (previousX) {\n    // keep track of frames where x hasn't moved\n    if (!this.isPointerDown && Math.round(this.x * 100) == Math.round(previousX * 100)) {\n      this.restingFrames++;\n    } // stop animating if resting for 3 or more frames\n\n\n    if (this.restingFrames > 2) {\n      this.isAnimating = false;\n      delete this.isFreeScrolling; // render position with translateX when settled\n\n      this.positionSlider();\n      this.dispatchEvent('settle', null, [this.selectedIndex]);\n    }\n  };\n\n  proto.shiftWrapCells = function (x) {\n    // shift before cells\n    var beforeGap = this.cursorPosition + x;\n\n    this._shiftCells(this.beforeShiftCells, beforeGap, -1); // shift after cells\n\n\n    var afterGap = this.size.innerWidth - (x + this.slideableWidth + this.cursorPosition);\n\n    this._shiftCells(this.afterShiftCells, afterGap, 1);\n  };\n\n  proto._shiftCells = function (cells, gap, shift) {\n    for (var i = 0; i < cells.length; i++) {\n      var cell = cells[i];\n      var cellShift = gap > 0 ? shift : 0;\n      cell.wrapShift(cellShift);\n      gap -= cell.size.outerWidth;\n    }\n  };\n\n  proto._unshiftCells = function (cells) {\n    if (!cells || !cells.length) {\n      return;\n    }\n\n    for (var i = 0; i < cells.length; i++) {\n      cells[i].wrapShift(0);\n    }\n  }; // -------------------------- physics -------------------------- //\n\n\n  proto.integratePhysics = function () {\n    this.x += this.velocity;\n    this.velocity *= this.getFrictionFactor();\n  };\n\n  proto.applyForce = function (force) {\n    this.velocity += force;\n  };\n\n  proto.getFrictionFactor = function () {\n    return 1 - this.options[this.isFreeScrolling ? 'freeScrollFriction' : 'friction'];\n  };\n\n  proto.getRestingPosition = function () {\n    // my thanks to Steven Wittens, who simplified this math greatly\n    return this.x + this.velocity / (1 - this.getFrictionFactor());\n  };\n\n  proto.applyDragForce = function () {\n    if (!this.isDraggable || !this.isPointerDown) {\n      return;\n    } // change the position to drag position by applying force\n\n\n    var dragVelocity = this.dragX - this.x;\n    var dragForce = dragVelocity - this.velocity;\n    this.applyForce(dragForce);\n  };\n\n  proto.applySelectedAttraction = function () {\n    // do not attract if pointer down or no slides\n    var dragDown = this.isDraggable && this.isPointerDown;\n\n    if (dragDown || this.isFreeScrolling || !this.slides.length) {\n      return;\n    }\n\n    var distance = this.selectedSlide.target * -1 - this.x;\n    var force = distance * this.options.selectedAttraction;\n    this.applyForce(force);\n  };\n\n  return proto;\n});","map":null,"metadata":{},"sourceType":"script"}