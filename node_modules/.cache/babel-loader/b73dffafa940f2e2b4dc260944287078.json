{"ast":null,"code":"// Flickity main\n(function (window, factory) {\n  // universal module definition\n\n  /* jshint strict: false */\n  if (typeof define == 'function' && define.amd) {\n    // AMD\n    define(['ev-emitter/ev-emitter', 'get-size/get-size', 'fizzy-ui-utils/utils', './cell', './slide', './animate'], function (EvEmitter, getSize, utils, Cell, Slide, animatePrototype) {\n      return factory(window, EvEmitter, getSize, utils, Cell, Slide, animatePrototype);\n    });\n  } else if (typeof module == 'object' && module.exports) {\n    // CommonJS\n    module.exports = factory(window, require('ev-emitter'), require('get-size'), require('fizzy-ui-utils'), require('./cell'), require('./slide'), require('./animate'));\n  } else {\n    // browser global\n    var _Flickity = window.Flickity;\n    window.Flickity = factory(window, window.EvEmitter, window.getSize, window.fizzyUIUtils, _Flickity.Cell, _Flickity.Slide, _Flickity.animatePrototype);\n  }\n})(window, function factory(window, EvEmitter, getSize, utils, Cell, Slide, animatePrototype) {\n  'use strict'; // vars\n\n  var jQuery = window.jQuery;\n  var getComputedStyle = window.getComputedStyle;\n  var console = window.console;\n\n  function moveElements(elems, toElem) {\n    elems = utils.makeArray(elems);\n\n    while (elems.length) {\n      toElem.appendChild(elems.shift());\n    }\n  } // -------------------------- Flickity -------------------------- //\n  // globally unique identifiers\n\n\n  var GUID = 0; // internal store of all Flickity intances\n\n  var instances = {};\n\n  function Flickity(element, options) {\n    var queryElement = utils.getQueryElement(element);\n\n    if (!queryElement) {\n      if (console) {\n        console.error('Bad element for Flickity: ' + (queryElement || element));\n      }\n\n      return;\n    }\n\n    this.element = queryElement; // do not initialize twice on same element\n\n    if (this.element.flickityGUID) {\n      var instance = instances[this.element.flickityGUID];\n      instance.option(options);\n      return instance;\n    } // add jQuery\n\n\n    if (jQuery) {\n      this.$element = jQuery(this.element);\n    } // options\n\n\n    this.options = utils.extend({}, this.constructor.defaults);\n    this.option(options); // kick things off\n\n    this._create();\n  }\n\n  Flickity.defaults = {\n    accessibility: true,\n    // adaptiveHeight: false,\n    cellAlign: 'center',\n    // cellSelector: undefined,\n    // contain: false,\n    freeScrollFriction: 0.075,\n    // friction when free-scrolling\n    friction: 0.28,\n    // friction when selecting\n    namespaceJQueryEvents: true,\n    // initialIndex: 0,\n    percentPosition: true,\n    resize: true,\n    selectedAttraction: 0.025,\n    setGallerySize: true // watchCSS: false,\n    // wrapAround: false\n\n  }; // hash of methods triggered on _create()\n\n  Flickity.createMethods = [];\n  var proto = Flickity.prototype; // inherit EventEmitter\n\n  utils.extend(proto, EvEmitter.prototype);\n\n  proto._create = function () {\n    // add id for Flickity.data\n    var id = this.guid = ++GUID;\n    this.element.flickityGUID = id; // expando\n\n    instances[id] = this; // associate via id\n    // initial properties\n\n    this.selectedIndex = 0; // how many frames slider has been in same position\n\n    this.restingFrames = 0; // initial physics properties\n\n    this.x = 0;\n    this.velocity = 0;\n    this.originSide = this.options.rightToLeft ? 'right' : 'left'; // create viewport & slider\n\n    this.viewport = document.createElement('div');\n    this.viewport.className = 'flickity-viewport';\n\n    this._createSlider();\n\n    if (this.options.resize || this.options.watchCSS) {\n      window.addEventListener('resize', this);\n    } // add listeners from on option\n\n\n    for (var eventName in this.options.on) {\n      var listener = this.options.on[eventName];\n      this.on(eventName, listener);\n    }\n\n    Flickity.createMethods.forEach(function (method) {\n      this[method]();\n    }, this);\n\n    if (this.options.watchCSS) {\n      this.watchCSS();\n    } else {\n      this.activate();\n    }\n  };\n  /**\n   * set options\n   * @param {Object} opts\n   */\n\n\n  proto.option = function (opts) {\n    utils.extend(this.options, opts);\n  };\n\n  proto.activate = function () {\n    if (this.isActive) {\n      return;\n    }\n\n    this.isActive = true;\n    this.element.classList.add('flickity-enabled');\n\n    if (this.options.rightToLeft) {\n      this.element.classList.add('flickity-rtl');\n    }\n\n    this.getSize(); // move initial cell elements so they can be loaded as cells\n\n    var cellElems = this._filterFindCellElements(this.element.children);\n\n    moveElements(cellElems, this.slider);\n    this.viewport.appendChild(this.slider);\n    this.element.appendChild(this.viewport); // get cells from children\n\n    this.reloadCells();\n\n    if (this.options.accessibility) {\n      // allow element to focusable\n      this.element.tabIndex = 0; // listen for key presses\n\n      this.element.addEventListener('keydown', this);\n    }\n\n    this.emitEvent('activate');\n    this.selectInitialIndex(); // flag for initial activation, for using initialIndex\n\n    this.isInitActivated = true; // ready event. #493\n\n    this.dispatchEvent('ready');\n  }; // slider positions the cells\n\n\n  proto._createSlider = function () {\n    // slider element does all the positioning\n    var slider = document.createElement('div');\n    slider.className = 'flickity-slider';\n    slider.style[this.originSide] = 0;\n    this.slider = slider;\n  };\n\n  proto._filterFindCellElements = function (elems) {\n    return utils.filterFindElements(elems, this.options.cellSelector);\n  }; // goes through all children\n\n\n  proto.reloadCells = function () {\n    // collection of item elements\n    this.cells = this._makeCells(this.slider.children);\n    this.positionCells();\n\n    this._getWrapShiftCells();\n\n    this.setGallerySize();\n  };\n  /**\n   * turn elements into Flickity.Cells\n   * @param {Array or NodeList or HTMLElement} elems\n   * @returns {Array} items - collection of new Flickity Cells\n   */\n\n\n  proto._makeCells = function (elems) {\n    var cellElems = this._filterFindCellElements(elems); // create new Flickity for collection\n\n\n    var cells = cellElems.map(function (cellElem) {\n      return new Cell(cellElem, this);\n    }, this);\n    return cells;\n  };\n\n  proto.getLastCell = function () {\n    return this.cells[this.cells.length - 1];\n  };\n\n  proto.getLastSlide = function () {\n    return this.slides[this.slides.length - 1];\n  }; // positions all cells\n\n\n  proto.positionCells = function () {\n    // size all cells\n    this._sizeCells(this.cells); // position all cells\n\n\n    this._positionCells(0);\n  };\n  /**\n   * position certain cells\n   * @param {Integer} index - which cell to start with\n   */\n\n\n  proto._positionCells = function (index) {\n    index = index || 0; // also measure maxCellHeight\n    // start 0 if positioning all cells\n\n    this.maxCellHeight = index ? this.maxCellHeight || 0 : 0;\n    var cellX = 0; // get cellX\n\n    if (index > 0) {\n      var startCell = this.cells[index - 1];\n      cellX = startCell.x + startCell.size.outerWidth;\n    }\n\n    var len = this.cells.length;\n\n    for (var i = index; i < len; i++) {\n      var cell = this.cells[i];\n      cell.setPosition(cellX);\n      cellX += cell.size.outerWidth;\n      this.maxCellHeight = Math.max(cell.size.outerHeight, this.maxCellHeight);\n    } // keep track of cellX for wrap-around\n\n\n    this.slideableWidth = cellX; // slides\n\n    this.updateSlides(); // contain slides target\n\n    this._containSlides(); // update slidesWidth\n\n\n    this.slidesWidth = len ? this.getLastSlide().target - this.slides[0].target : 0;\n  };\n  /**\n   * cell.getSize() on multiple cells\n   * @param {Array} cells\n   */\n\n\n  proto._sizeCells = function (cells) {\n    cells.forEach(function (cell) {\n      cell.getSize();\n    });\n  }; // --------------------------  -------------------------- //\n\n\n  proto.updateSlides = function () {\n    this.slides = [];\n\n    if (!this.cells.length) {\n      return;\n    }\n\n    var slide = new Slide(this);\n    this.slides.push(slide);\n    var isOriginLeft = this.originSide == 'left';\n    var nextMargin = isOriginLeft ? 'marginRight' : 'marginLeft';\n\n    var canCellFit = this._getCanCellFit();\n\n    this.cells.forEach(function (cell, i) {\n      // just add cell if first cell in slide\n      if (!slide.cells.length) {\n        slide.addCell(cell);\n        return;\n      }\n\n      var slideWidth = slide.outerWidth - slide.firstMargin + (cell.size.outerWidth - cell.size[nextMargin]);\n\n      if (canCellFit.call(this, i, slideWidth)) {\n        slide.addCell(cell);\n      } else {\n        // doesn't fit, new slide\n        slide.updateTarget();\n        slide = new Slide(this);\n        this.slides.push(slide);\n        slide.addCell(cell);\n      }\n    }, this); // last slide\n\n    slide.updateTarget(); // update .selectedSlide\n\n    this.updateSelectedSlide();\n  };\n\n  proto._getCanCellFit = function () {\n    var groupCells = this.options.groupCells;\n\n    if (!groupCells) {\n      return function () {\n        return false;\n      };\n    } else if (typeof groupCells == 'number') {\n      // group by number. 3 -> [0,1,2], [3,4,5], ...\n      var number = parseInt(groupCells, 10);\n      return function (i) {\n        return i % number !== 0;\n      };\n    } // default, group by width of slide\n    // parse '75%\n\n\n    var percentMatch = typeof groupCells == 'string' && groupCells.match(/^(\\d+)%$/);\n    var percent = percentMatch ? parseInt(percentMatch[1], 10) / 100 : 1;\n    return function (i, slideWidth) {\n      return slideWidth <= (this.size.innerWidth + 1) * percent;\n    };\n  }; // alias _init for jQuery plugin .flickity()\n\n\n  proto._init = proto.reposition = function () {\n    this.positionCells();\n    this.positionSliderAtSelected();\n  };\n\n  proto.getSize = function () {\n    this.size = getSize(this.element);\n    this.setCellAlign();\n    this.cursorPosition = this.size.innerWidth * this.cellAlign;\n  };\n\n  var cellAlignShorthands = {\n    // cell align, then based on origin side\n    center: {\n      left: 0.5,\n      right: 0.5\n    },\n    left: {\n      left: 0,\n      right: 1\n    },\n    right: {\n      right: 0,\n      left: 1\n    }\n  };\n\n  proto.setCellAlign = function () {\n    var shorthand = cellAlignShorthands[this.options.cellAlign];\n    this.cellAlign = shorthand ? shorthand[this.originSide] : this.options.cellAlign;\n  };\n\n  proto.setGallerySize = function () {\n    if (this.options.setGallerySize) {\n      var height = this.options.adaptiveHeight && this.selectedSlide ? this.selectedSlide.height : this.maxCellHeight;\n      this.viewport.style.height = height + 'px';\n    }\n  };\n\n  proto._getWrapShiftCells = function () {\n    // only for wrap-around\n    if (!this.options.wrapAround) {\n      return;\n    } // unshift previous cells\n\n\n    this._unshiftCells(this.beforeShiftCells);\n\n    this._unshiftCells(this.afterShiftCells); // get before cells\n    // initial gap\n\n\n    var gapX = this.cursorPosition;\n    var cellIndex = this.cells.length - 1;\n    this.beforeShiftCells = this._getGapCells(gapX, cellIndex, -1); // get after cells\n    // ending gap between last cell and end of gallery viewport\n\n    gapX = this.size.innerWidth - this.cursorPosition; // start cloning at first cell, working forwards\n\n    this.afterShiftCells = this._getGapCells(gapX, 0, 1);\n  };\n\n  proto._getGapCells = function (gapX, cellIndex, increment) {\n    // keep adding cells until the cover the initial gap\n    var cells = [];\n\n    while (gapX > 0) {\n      var cell = this.cells[cellIndex];\n\n      if (!cell) {\n        break;\n      }\n\n      cells.push(cell);\n      cellIndex += increment;\n      gapX -= cell.size.outerWidth;\n    }\n\n    return cells;\n  }; // ----- contain ----- //\n  // contain cell targets so no excess sliding\n\n\n  proto._containSlides = function () {\n    if (!this.options.contain || this.options.wrapAround || !this.cells.length) {\n      return;\n    }\n\n    var isRightToLeft = this.options.rightToLeft;\n    var beginMargin = isRightToLeft ? 'marginRight' : 'marginLeft';\n    var endMargin = isRightToLeft ? 'marginLeft' : 'marginRight';\n    var contentWidth = this.slideableWidth - this.getLastCell().size[endMargin]; // content is less than gallery size\n\n    var isContentSmaller = contentWidth < this.size.innerWidth; // bounds\n\n    var beginBound = this.cursorPosition + this.cells[0].size[beginMargin];\n    var endBound = contentWidth - this.size.innerWidth * (1 - this.cellAlign); // contain each cell target\n\n    this.slides.forEach(function (slide) {\n      if (isContentSmaller) {\n        // all cells fit inside gallery\n        slide.target = contentWidth * this.cellAlign;\n      } else {\n        // contain to bounds\n        slide.target = Math.max(slide.target, beginBound);\n        slide.target = Math.min(slide.target, endBound);\n      }\n    }, this);\n  }; // -----  ----- //\n\n  /**\n   * emits events via eventEmitter and jQuery events\n   * @param {String} type - name of event\n   * @param {Event} event - original event\n   * @param {Array} args - extra arguments\n   */\n\n\n  proto.dispatchEvent = function (type, event, args) {\n    var emitArgs = event ? [event].concat(args) : args;\n    this.emitEvent(type, emitArgs);\n\n    if (jQuery && this.$element) {\n      // default trigger with type if no event\n      type += this.options.namespaceJQueryEvents ? '.flickity' : '';\n      var $event = type;\n\n      if (event) {\n        // create jQuery event\n        var jQEvent = jQuery.Event(event);\n        jQEvent.type = type;\n        $event = jQEvent;\n      }\n\n      this.$element.trigger($event, args);\n    }\n  }; // -------------------------- select -------------------------- //\n\n  /**\n   * @param {Integer} index - index of the slide\n   * @param {Boolean} isWrap - will wrap-around to last/first if at the end\n   * @param {Boolean} isInstant - will immediately set position at selected cell\n   */\n\n\n  proto.select = function (index, isWrap, isInstant) {\n    if (!this.isActive) {\n      return;\n    }\n\n    index = parseInt(index, 10);\n\n    this._wrapSelect(index);\n\n    if (this.options.wrapAround || isWrap) {\n      index = utils.modulo(index, this.slides.length);\n    } // bail if invalid index\n\n\n    if (!this.slides[index]) {\n      return;\n    }\n\n    var prevIndex = this.selectedIndex;\n    this.selectedIndex = index;\n    this.updateSelectedSlide();\n\n    if (isInstant) {\n      this.positionSliderAtSelected();\n    } else {\n      this.startAnimation();\n    }\n\n    if (this.options.adaptiveHeight) {\n      this.setGallerySize();\n    } // events\n\n\n    this.dispatchEvent('select', null, [index]); // change event if new index\n\n    if (index != prevIndex) {\n      this.dispatchEvent('change', null, [index]);\n    } // old v1 event name, remove in v3\n\n\n    this.dispatchEvent('cellSelect');\n  }; // wraps position for wrapAround, to move to closest slide. #113\n\n\n  proto._wrapSelect = function (index) {\n    var len = this.slides.length;\n    var isWrapping = this.options.wrapAround && len > 1;\n\n    if (!isWrapping) {\n      return index;\n    }\n\n    var wrapIndex = utils.modulo(index, len); // go to shortest\n\n    var delta = Math.abs(wrapIndex - this.selectedIndex);\n    var backWrapDelta = Math.abs(wrapIndex + len - this.selectedIndex);\n    var forewardWrapDelta = Math.abs(wrapIndex - len - this.selectedIndex);\n\n    if (!this.isDragSelect && backWrapDelta < delta) {\n      index += len;\n    } else if (!this.isDragSelect && forewardWrapDelta < delta) {\n      index -= len;\n    } // wrap position so slider is within normal area\n\n\n    if (index < 0) {\n      this.x -= this.slideableWidth;\n    } else if (index >= len) {\n      this.x += this.slideableWidth;\n    }\n  };\n\n  proto.previous = function (isWrap, isInstant) {\n    this.select(this.selectedIndex - 1, isWrap, isInstant);\n  };\n\n  proto.next = function (isWrap, isInstant) {\n    this.select(this.selectedIndex + 1, isWrap, isInstant);\n  };\n\n  proto.updateSelectedSlide = function () {\n    var slide = this.slides[this.selectedIndex]; // selectedIndex could be outside of slides, if triggered before resize()\n\n    if (!slide) {\n      return;\n    } // unselect previous selected slide\n\n\n    this.unselectSelectedSlide(); // update new selected slide\n\n    this.selectedSlide = slide;\n    slide.select();\n    this.selectedCells = slide.cells;\n    this.selectedElements = slide.getCellElements(); // HACK: selectedCell & selectedElement is first cell in slide, backwards compatibility\n    // Remove in v3?\n\n    this.selectedCell = slide.cells[0];\n    this.selectedElement = this.selectedElements[0];\n  };\n\n  proto.unselectSelectedSlide = function () {\n    if (this.selectedSlide) {\n      this.selectedSlide.unselect();\n    }\n  };\n\n  proto.selectInitialIndex = function () {\n    var initialIndex = this.options.initialIndex; // already activated, select previous selectedIndex\n\n    if (this.isInitActivated) {\n      this.select(this.selectedIndex, false, true);\n      return;\n    } // select with selector string\n\n\n    if (initialIndex && typeof initialIndex == 'string') {\n      var cell = this.queryCell(initialIndex);\n\n      if (cell) {\n        this.selectCell(initialIndex, false, true);\n        return;\n      }\n    }\n\n    var index = 0; // select with number\n\n    if (initialIndex && this.slides[initialIndex]) {\n      index = initialIndex;\n    } // select instantly\n\n\n    this.select(index, false, true);\n  };\n  /**\n   * select slide from number or cell element\n   * @param {Element or Number} elem\n   */\n\n\n  proto.selectCell = function (value, isWrap, isInstant) {\n    // get cell\n    var cell = this.queryCell(value);\n\n    if (!cell) {\n      return;\n    }\n\n    var index = this.getCellSlideIndex(cell);\n    this.select(index, isWrap, isInstant);\n  };\n\n  proto.getCellSlideIndex = function (cell) {\n    // get index of slides that has cell\n    for (var i = 0; i < this.slides.length; i++) {\n      var slide = this.slides[i];\n      var index = slide.cells.indexOf(cell);\n\n      if (index != -1) {\n        return i;\n      }\n    }\n  }; // -------------------------- get cells -------------------------- //\n\n  /**\n   * get Flickity.Cell, given an Element\n   * @param {Element} elem\n   * @returns {Flickity.Cell} item\n   */\n\n\n  proto.getCell = function (elem) {\n    // loop through cells to get the one that matches\n    for (var i = 0; i < this.cells.length; i++) {\n      var cell = this.cells[i];\n\n      if (cell.element == elem) {\n        return cell;\n      }\n    }\n  };\n  /**\n   * get collection of Flickity.Cells, given Elements\n   * @param {Element, Array, NodeList} elems\n   * @returns {Array} cells - Flickity.Cells\n   */\n\n\n  proto.getCells = function (elems) {\n    elems = utils.makeArray(elems);\n    var cells = [];\n    elems.forEach(function (elem) {\n      var cell = this.getCell(elem);\n\n      if (cell) {\n        cells.push(cell);\n      }\n    }, this);\n    return cells;\n  };\n  /**\n   * get cell elements\n   * @returns {Array} cellElems\n   */\n\n\n  proto.getCellElements = function () {\n    return this.cells.map(function (cell) {\n      return cell.element;\n    });\n  };\n  /**\n   * get parent cell from an element\n   * @param {Element} elem\n   * @returns {Flickit.Cell} cell\n   */\n\n\n  proto.getParentCell = function (elem) {\n    // first check if elem is cell\n    var cell = this.getCell(elem);\n\n    if (cell) {\n      return cell;\n    } // try to get parent cell elem\n\n\n    elem = utils.getParent(elem, '.flickity-slider > *');\n    return this.getCell(elem);\n  };\n  /**\n   * get cells adjacent to a slide\n   * @param {Integer} adjCount - number of adjacent slides\n   * @param {Integer} index - index of slide to start\n   * @returns {Array} cells - array of Flickity.Cells\n   */\n\n\n  proto.getAdjacentCellElements = function (adjCount, index) {\n    if (!adjCount) {\n      return this.selectedSlide.getCellElements();\n    }\n\n    index = index === undefined ? this.selectedIndex : index;\n    var len = this.slides.length;\n\n    if (1 + adjCount * 2 >= len) {\n      return this.getCellElements();\n    }\n\n    var cellElems = [];\n\n    for (var i = index - adjCount; i <= index + adjCount; i++) {\n      var slideIndex = this.options.wrapAround ? utils.modulo(i, len) : i;\n      var slide = this.slides[slideIndex];\n\n      if (slide) {\n        cellElems = cellElems.concat(slide.getCellElements());\n      }\n    }\n\n    return cellElems;\n  };\n  /**\n   * select slide from number or cell element\n   * @param {Element, Selector String, or Number} selector\n   */\n\n\n  proto.queryCell = function (selector) {\n    if (typeof selector == 'number') {\n      // use number as index\n      return this.cells[selector];\n    }\n\n    if (typeof selector == 'string') {\n      // do not select invalid selectors from hash: #123, #/. #791\n      if (selector.match(/^[#\\.]?[\\d\\/]/)) {\n        return;\n      } // use string as selector, get element\n\n\n      selector = this.element.querySelector(selector);\n    } // get cell from element\n\n\n    return this.getCell(selector);\n  }; // -------------------------- events -------------------------- //\n\n\n  proto.uiChange = function () {\n    this.emitEvent('uiChange');\n  }; // keep focus on element when child UI elements are clicked\n\n\n  proto.childUIPointerDown = function (event) {\n    // HACK iOS does not allow touch events to bubble up?!\n    if (event.type != 'touchstart') {\n      event.preventDefault();\n    }\n\n    this.focus();\n  }; // ----- resize ----- //\n\n\n  proto.onresize = function () {\n    this.watchCSS();\n    this.resize();\n  };\n\n  utils.debounceMethod(Flickity, 'onresize', 150);\n\n  proto.resize = function () {\n    if (!this.isActive) {\n      return;\n    }\n\n    this.getSize(); // wrap values\n\n    if (this.options.wrapAround) {\n      this.x = utils.modulo(this.x, this.slideableWidth);\n    }\n\n    this.positionCells();\n\n    this._getWrapShiftCells();\n\n    this.setGallerySize();\n    this.emitEvent('resize'); // update selected index for group slides, instant\n    // TODO: position can be lost between groups of various numbers\n\n    var selectedElement = this.selectedElements && this.selectedElements[0];\n    this.selectCell(selectedElement, false, true);\n  }; // watches the :after property, activates/deactivates\n\n\n  proto.watchCSS = function () {\n    var watchOption = this.options.watchCSS;\n\n    if (!watchOption) {\n      return;\n    }\n\n    var afterContent = getComputedStyle(this.element, ':after').content; // activate if :after { content: 'flickity' }\n\n    if (afterContent.indexOf('flickity') != -1) {\n      this.activate();\n    } else {\n      this.deactivate();\n    }\n  }; // ----- keydown ----- //\n  // go previous/next if left/right keys pressed\n\n\n  proto.onkeydown = function (event) {\n    // only work if element is in focus\n    var isNotFocused = document.activeElement && document.activeElement != this.element;\n\n    if (!this.options.accessibility || isNotFocused) {\n      return;\n    }\n\n    var handler = Flickity.keyboardHandlers[event.keyCode];\n\n    if (handler) {\n      handler.call(this);\n    }\n  };\n\n  Flickity.keyboardHandlers = {\n    // left arrow\n    37: function () {\n      var leftMethod = this.options.rightToLeft ? 'next' : 'previous';\n      this.uiChange();\n      this[leftMethod]();\n    },\n    // right arrow\n    39: function () {\n      var rightMethod = this.options.rightToLeft ? 'previous' : 'next';\n      this.uiChange();\n      this[rightMethod]();\n    }\n  }; // ----- focus ----- //\n\n  proto.focus = function () {\n    // TODO remove scrollTo once focus options gets more support\n    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#Browser_compatibility\n    var prevScrollY = window.pageYOffset;\n    this.element.focus({\n      preventScroll: true\n    }); // hack to fix scroll jump after focus, #76\n\n    if (window.pageYOffset != prevScrollY) {\n      window.scrollTo(window.pageXOffset, prevScrollY);\n    }\n  }; // -------------------------- destroy -------------------------- //\n  // deactivate all Flickity functionality, but keep stuff available\n\n\n  proto.deactivate = function () {\n    if (!this.isActive) {\n      return;\n    }\n\n    this.element.classList.remove('flickity-enabled');\n    this.element.classList.remove('flickity-rtl');\n    this.unselectSelectedSlide(); // destroy cells\n\n    this.cells.forEach(function (cell) {\n      cell.destroy();\n    });\n    this.element.removeChild(this.viewport); // move child elements back into element\n\n    moveElements(this.slider.children, this.element);\n\n    if (this.options.accessibility) {\n      this.element.removeAttribute('tabIndex');\n      this.element.removeEventListener('keydown', this);\n    } // set flags\n\n\n    this.isActive = false;\n    this.emitEvent('deactivate');\n  };\n\n  proto.destroy = function () {\n    this.deactivate();\n    window.removeEventListener('resize', this);\n    this.allOff();\n    this.emitEvent('destroy');\n\n    if (jQuery && this.$element) {\n      jQuery.removeData(this.element, 'flickity');\n    }\n\n    delete this.element.flickityGUID;\n    delete instances[this.guid];\n  }; // -------------------------- prototype -------------------------- //\n\n\n  utils.extend(proto, animatePrototype); // -------------------------- extras -------------------------- //\n\n  /**\n   * get Flickity instance from element\n   * @param {Element} elem\n   * @returns {Flickity}\n   */\n\n  Flickity.data = function (elem) {\n    elem = utils.getQueryElement(elem);\n    var id = elem && elem.flickityGUID;\n    return id && instances[id];\n  };\n\n  utils.htmlInit(Flickity, 'flickity');\n\n  if (jQuery && jQuery.bridget) {\n    jQuery.bridget('flickity', Flickity);\n  } // set internal jQuery, for Webpack + jQuery v3, #478\n\n\n  Flickity.setJQuery = function (jq) {\n    jQuery = jq;\n  };\n\n  Flickity.Cell = Cell;\n  Flickity.Slide = Slide;\n  return Flickity;\n});","map":null,"metadata":{},"sourceType":"script"}